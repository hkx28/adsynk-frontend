import React, { useState, useEffect } from 'react';
import './App.css';
import AdList from './components/AdList';
import AdScheduler from './components/AdScheduler';
import ScheduleList from './components/ScheduleList';
import Settings from './components/Settings';
import Monitoring from './components/Monitoring';
import { adAPI, scheduleAPI } from './services/api';

function App() {
  const [activeTab, setActiveTab] = useState('monitoring');
  const [ads, setAds] = useState([]);
  const [schedules, setSchedules] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // MediaLive ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [mediaLiveStatus, setMediaLiveStatus] = useState({
    connected: false,
    channelId: null,
    channelName: null,
    channelState: null,
    lastUpdated: null
  });

  // Í¥ëÍ≥† Î™©Î°ù Î°úÎìú
  const loadAds = async () => {
    try {
      setLoading(true);
      const adsData = await adAPI.getAds();
      setAds(adsData);
    } catch (err) {
      setError('Failed to load ad list.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // Ïä§ÏºÄÏ§Ñ Î™©Î°ù Î°úÎìú
  const loadSchedules = async () => {
    try {
      setLoading(true);
      const schedulesData = await scheduleAPI.getSchedules();
      setSchedules(schedulesData);
    } catch (err) {
      setError('Failed to load schedule list.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // MediaLive ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
  const updateMediaLiveStatus = (status) => {
    setMediaLiveStatus({
      ...status,
      lastUpdated: new Date().toISOString()
    });
  };

  // MediaLive ÏÉÅÌÉú ÌëúÏãú Ìï®Ïàò
  const getMediaLiveStatusIndicator = (status) => {
    if (!status.connected) {
      return 'üî¥ MediaLive Offline';
    }
    
    switch (status.channelState) {
      case 'RUNNING':
        return 'üü¢ MediaLive Ready';
      case 'IDLE':
        return 'üü° MediaLive Idle';
      case 'STARTING':
        return 'üîµ MediaLive Starting';
      case 'STOPPING':
        return 'üü† MediaLive Stopping';
      default:
        return '‚ö™ MediaLive Unknown';
    }
  };

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    loadAds();
    loadSchedules();
    
    // Ï†ÄÏû•Îêú MediaLive ÏÑ§Ï†ï Î°úÎìú
    const savedConfig = localStorage.getItem('mediaLiveConfig');
    if (savedConfig) {
      try {
        const config = JSON.parse(savedConfig);
        if (config.connectionStatus === 'connected') {
          setMediaLiveStatus({
            connected: true,
            channelId: config.channelId,
            channelName: config.channelName,
            channelState: config.channelState,
            lastUpdated: config.lastTested
          });
        }
      } catch (error) {
        console.error('Failed to load MediaLive config:', error);
      }
    }
  }, []);

  // Ïä§ÏºÄÏ§Ñ ÏÉùÏÑ± Ìï∏Îì§Îü¨ (Phase 3: MediaLive ÌÜµÌï©)
  const handleScheduleCreate = async (scheduleData) => {
    try {
      const result = await scheduleAPI.createScheduleWithMediaLive(scheduleData);
      await loadSchedules(); // Ïä§ÏºÄÏ§Ñ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      
      // Í≤∞Í≥ºÏóê Îî∞Î•∏ ÏÉÅÏÑ∏ ÌîºÎìúÎ∞± Î∞òÌôò
      return {
        success: result.success,
        dynamodbSuccess: result.dynamodbSuccess,
        mediaLiveSuccess: result.mediaLiveSuccess,
        errors: result.errors
      };
    } catch (err) {
      setError('Failed to create schedule.');
      console.error(err);
      return {
        success: false,
        dynamodbSuccess: false,
        mediaLiveSuccess: false,
        errors: [err.message]
      };
    }
  };

  // Ïä§ÏºÄÏ§Ñ ÏÇ≠Ï†ú Ìï∏Îì§Îü¨ (Phase 4: MediaLive ÌÜµÌï©)
  const handleScheduleDelete = async (scheduleId, scheduleData) => {
    try {
      const result = await scheduleAPI.deleteScheduleWithMediaLive(scheduleId, scheduleData);
      await loadSchedules(); // Ïä§ÏºÄÏ§Ñ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      
      // ÏÇ≠Ï†ú Í≤∞Í≥º ÌîºÎìúÎ∞±
      if (result.success && result.dynamodbSuccess && result.mediaLiveSuccess) {
        // ÏôÑÏ†Ñ ÏÇ≠Ï†ú ÏÑ±Í≥µ - Î≥ÑÎèÑ Î©îÏãúÏßÄ ÏóÜÏù¥ Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
        console.log('Schedule deleted successfully from both systems');
      } else if (result.success && result.dynamodbSuccess && !result.mediaLiveSuccess) {
        // Î∂ÄÎ∂Ñ ÏÇ≠Ï†ú - Í≤ΩÍ≥† Î©îÏãúÏßÄ ÌëúÏãú
        setError('Schedule deleted but MediaLive sync failed. ' + (result.errors?.[0] || ''));
        setTimeout(() => setError(null), 5000); // 5Ï¥à ÌõÑ ÏûêÎèô Ïà®ÍπÄ
      }
      
      return result;
    } catch (err) {
      setError('Failed to delete schedule.');
      console.error(err);
      return {
        success: false,
        dynamodbSuccess: false,
        mediaLiveSuccess: false,
        errors: [err.message]
      };
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Adsynk</h1>
        <p>Real-time Ad Scheduling Management System</p>
      </header>

      <nav className="App-nav">
        <button 
          className={activeTab === 'monitoring' ? 'active' : ''}
          onClick={() => setActiveTab('monitoring')}
        >
          Monitoring
        </button>
        <button 
          className={activeTab === 'schedule' ? 'active' : ''}
          onClick={() => setActiveTab('schedule')}
        >
          Schedule Creation
        </button>
        <button 
          className={activeTab === 'schedules' ? 'active' : ''}
          onClick={() => setActiveTab('schedules')}
        >
          Schedule List
        </button>
        <button 
          className={activeTab === 'ads' ? 'active' : ''}
          onClick={() => setActiveTab('ads')}
        >
          Ad Management
        </button>
        <button 
          className={activeTab === 'settings' ? 'active' : ''}
          onClick={() => setActiveTab('settings')}
        >
          Settings
        </button>
      </nav>

      <main className="App-main">
        {error && (
          <div className="error-message">
            ‚ùå {error}
            <button onClick={() => setError(null)}>Close</button>
          </div>
        )}

        {loading && <div className="loading">‚è≥ Loading...</div>}

        {activeTab === 'monitoring' && (
          <Monitoring />
        )}

        {activeTab === 'schedule' && (
          <AdScheduler 
            ads={ads} 
            onScheduleCreate={handleScheduleCreate}
          />
        )}

        {activeTab === 'schedules' && (
          <ScheduleList 
            schedules={schedules}
            ads={ads}
            onScheduleDelete={handleScheduleDelete}
            onRefresh={loadSchedules}
          />
        )}

        {activeTab === 'ads' && (
          <AdList 
            ads={ads}
            onRefresh={loadAds}
          />
        )}

        {activeTab === 'settings' && (
          <Settings onMediaLiveStatusUpdate={updateMediaLiveStatus} />
        )}
      </main>

      <footer className="App-footer">
        <p>Originally developed for demonstration at MEGAZONECLOUD.<br/>¬© 2025 Joseph. All rights reserved.</p>
        <div className="system-status">
          <span className="status-indicator active"></span>
          System Active
          <span className="medialive-status">
            {getMediaLiveStatusIndicator(mediaLiveStatus)}
          </span>
        </div>
      </footer>
    </div>
  );
}

export default App;
